# -*- coding: utf-8 -*-
"""QuizGenera.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h1QWDv0aZHZEOrrUgRMWLG89QnYmMLMC
"""

class Question:
    """
    Base class for all types of questions.
    """
    def __init__(self, text, answer):
        self.text = text
        self.answer = answer

    def display(self):
        raise NotImplementedError("Subclasses should implement this method.")

    def validate(self, user_input):
        raise NotImplementedError("Subclasses should implement this method.")


class YesNoQuestion(Question):
    """
    A question that requires a 'yes' or 'no' response.
    """
    def display(self):
        print(f"[?] {self.text} (yes/no)")

    def validate(self, user_input):
        return user_input.strip().lower() == ("yes" if self.answer else "no")


class OpenQuestion(Question):
    """
    A question where the user types their response freely.
    """
    def display(self):
        print(self.text)

    def validate(self, user_input):
        return user_input.strip().lower() == self.answer.lower()


class MultipleChoiceQuestion(Question):
    """
    A question where the user chooses from multiple options.
    """
    def __init__(self, text, options, correct_index):
        super().__init__(text, correct_index)
        self.options = options

    def display(self):
        print(self.text)
        for index, option in enumerate(self.options, start=1):
            print(f"{index}. {option}")

    def validate(self, user_input):
        if user_input.isdigit():
            return int(user_input) == self.answer
        return False


class Quiz:
    """
    Main class to manage the quiz flow, including questions and scoring.
    """
    def __init__(self):
        self.questions = []
        self.correct_answers = 0

    def add_question(self, question):
        self.questions.append(question)

    def start(self):
        print("Welcome to the Quiz!\nAnswer the questions as best as you can.\n")

        for question in self.questions:
            question.display()
            user_input = input("Your answer: ").strip()
            if question.validate(user_input):
                print("Correct!\n")
                self.correct_answers += 1
            else:
                print("Oops, that's not right.\n")

        self.show_results()

    def show_results(self):
        print("\nQuiz Over!")
        print(f"You got {self.correct_answers}/{len(self.questions)} correct.")
        if self.correct_answers == len(self.questions):
            print("Amazing! You aced it!")
        elif self.correct_answers > len(self.questions) // 2:
            print("Well done! Keep practicing, and you'll be unstoppable.")
        else:
            print("Don't worry; try again to improve!")


def main():
    """
    The entry point for the program.
    """
    quiz = Quiz()

    # Adding different types of questions to the quiz
    quiz.add_question(YesNoQuestion("Is Python an interpreted language?", True))
    quiz.add_question(OpenQuestion("What is the capital of India?", "New Delhi"))
    quiz.add_question(
        MultipleChoiceQuestion(
            "Which of these is a Python data structure?",
            ["List", "Treehouse", "Notebook"],
            1
        )
    )

    quiz.start()


if __name__ == "__main__":
    main()